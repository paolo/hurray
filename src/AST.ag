-- Abstract syntax grammar

{
type Id = String
}

DATA Root
 | Root program:Program

DATA Program
 | Program compstmt:Compstmt

TYPE Compstmt = [ Stmt ]

DATA Stmt 
 | CallS  Call                                StmtWithModif
 | Undef  identif:Id                          StmtWithModif
 | Alias  identif_i:Id      identif_d:Id      StmtWithModif
 | Begin  Compstmt                            StmtWithModif
 | End    Compstmt                            StmtWithModif
 | ExprS  expr:Expr                           StmtWithModif

DATA StmtWithModif
 | If     expr:Expr   StmtWithModif
 | While  expr:Expr   StmtWithModif
 | Unless expr:Expr   StmtWithModif
 | Until  expr:Expr   StmtWithModif
 | NilStmt

DATA Call
 | Function  fun:Function  
 | Command   cmd:Command

DATA Function
 | Function identif:Id   Call_ArgsFs
 | ComposedFun 

TYPE Call_ArgsFs = [ Call_ArgsF ]
          
DATA Call_ArgsF
 | Call_ArgsFs Arg

DATA Expr 
 | OpExpr      left:Expr  OpE   right:Expr
 | ReturnExpr  Call_Args
 | YieldExpr   Call_Args
 | NotExpr     expr:Expr
 | CommandExpr fun:Function
 | ArgExpr     arg:Arg

DATA OpE 
 | AndExpr 
 | OrExpr

TYPE Call_Args = [ Call_Arg ]

DATA Call_Arg  
 | Integer   integer:Int
 | String    string :String
 | Identif  identif:Id

DATA Arg 
 | ArgOpBin    OpBin             al:Arg             ar:Arg
 | ArgOpUn     OpUn              Arg
 | ArgAsig     identif:Id        opAsgn:OpAsgn      Arg
 | ArgDefined  arg:Arg
 | ArgPrimary  primary:Primary

{
type OpBin  = String
type OpUn   = String
type OpAsgn = String
}

DATA Primary
 | Paren        Compstmt                                         Z3
 | Variable     variable:Variable                                Z3
 | ColonColon   identif:Id                                       Z3
 | ReturnYield  ReturnYield                                      Z3
 | DefinedP     Arg                                              Z3
 | Show         lv:Variable   rv:Variable                        Z3
 | If_P         expr:Expr     Then     Compstmt  ElsIf   Else    Z3
 | While_P      expr:Expr     Do       Compstmt                  Z3
 | For_P        Block_Var     expr:Expr     Do       Compstmt    Z3
 | Class        classname:Id  Inherits Compstmt                  Z3
 | Definition   name:Id       ArgDecls Compstmt                  Z3
 | FunctionP    Function                                         Z3

DATA Z3 
 | Ident identif:Id        Z3
 | ArgZ3 Arg               Z3
 | NilZ3

DATA Block_Var 
 | Block_Var_Lhs LhsB

DATA LhsB 
 | Lhs_id identif:Id

DATA Do 
 | DoSemiColon
 | DoDo
 | DoSemiColonDo          

DATA Then 
 | ThSemiColon
 | ThThen
 | ThSemiColonThen

DATA ElsIf
 | ElsIf expr:Expr  Then  Compstmt
 | NilElsIf

DATA Else
 | Else Compstmt
 | NilElse

DATA ReturnYield 
 | ReturnR Call_Args
 | YieldY  Call_Args

DATA Variable
 | Identifv  identif:Id
 | Int       int :Int
 | Str       str :String

TYPE Inherits = MAYBE Id

TYPE ArgDecls = [ ArgDecl ]

DATA ArgDecl
 | ArgDecl identif:Id

DATA Command 
 | ComP  Primary Call_Args
 | ComPP Primary Call_Args

DATA Op_Asgn 
 | PlusEq
 | MinuxEq
 | TimesEq
 | DivEq

DERIVING *: Show

-- ================================== show AST ==================================

SET AllRoot = * - Root
ATTR Root    [ || res:{IO ()}]
ATTR AllRoot [ || ast: SELF      ]

SEM Root
 | Root lhs.res = putStrLn (show @program.ast)
